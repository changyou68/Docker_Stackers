version: '3'

services:
  rsshub: 
    image: diygod/rsshub
    container_name: rsshub_sub
    restart: unless-stopped
    ports:
      - 1200:1200
    environment:
      NODE_ENV: production
      CACHE_TYPE: redis
      REDIS_URL: 'redis://redis:6379/'
      PUPPETEER_WS_ENDPOINT: 'ws://browserless:3000'
    depends_on:
      - redis
      - browserless
    networks:
      - rss-bridge
    labels:
      - com.centurylinklabs.watchtower.enable=1
      
  browserless:
    image: browserless/chrome
    container_name: browserless_sub
    restart: unless-stopped
    networks:
      - rss-bridge
    labels:
      - com.centurylinklabs.watchtower.enable=1
      
  redis:
    image: redis:alpine
    container_name: redis_sub
    restart: unless-stopped
    volumes:
      - /home/docker/docker_shared/redis:/data
    networks:
      - rss-bridge
    labels:
      - com.centurylinklabs.watchtower.enable=1
      
  miniflux:
    image: miniflux/miniflux:latest
    container_name: miniflux_sub
    restart: unless-stopped
    ports:
      - 8081:8080
    depends_on:
      - postgres
    environment:
      - TZ=America/New_York
      - DATABASE_URL=postgres://miniflux_admin:mypassword@postgres/miniflux?sslmode=disable
      - RUN_MIGRATIONS=1 # used for database migrations when postgres updraded to a new version.
      - POLLING_FREQUENCY=60
      - ARCHIVE_READ_DAYS=30
      - CLEANUP_FREQUENCY=30
      # 初次使用需要以下三個，否則無法使用
      #- CREATE_ADMIN=1
      - ADMIN_USERNAME=admin
      - ADMIN_PASSWORD=test123
    volumes:
      - /home/docker/docker_shared:/shared
    labels:
      - com.centurylinklabs.watchtower.enable=1
      
  postgres:
    image: postgres:latest
    container_name: postgres_sub
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=miniflux_admin
      - POSTGRES_PASSWORD=mypassword
      - POSTGRES_DB=miniflux
      - TZ=America/New_York
    volumes:
      - /home/docker/docker_shared/postgres:/var/lib/postgresql/data
    labels:
      - com.centurylinklabs.watchtower.enable=1
      
networks:
  rss-bridge:
    external:
      name: rss-out # run "sudo docker network create -d bridge rss-out" first
